{-# LANGUAGE ViewPatterns #-}

{-
  Coordinations on a Chess board.
 -}
module Game.Chess.Coord
  ( Coord
  , unsafeFromRankAndFile
  , fromRankAndFile
  {- ORMOLU_DISABLE -}
  , a1, b1, c1, d1, e1, f1, g1, h1
  , a2, b2, c2, d2, e2, f2, g2, h2
  , a3, b3, c3, d3, e3, f3, g3, h3
  , a4, b4, c4, d4, e4, f4, g4, h4
  , a5, b5, c5, d5, e5, f5, g5, h5
  , a6, b6, c6, d6, e6, f6, g6, h6
  , a7, b7, c7, d7, e7, f7, g7, h7
  , a8, b8, c8, d8, e8, f8, g8, h8
  {- ORMOLU_ENABLE -}
  )
where

import Control.Monad
import Data.Bits
import Data.List
import Data.Word

{-
  Word8 but only 0~63 are valid.

  - low bits (0~2) represents file
  - high bits (3~5) represents rank
 -}
newtype Coord = Coord Word8 deriving (Show)

{-
  Rank and file are both expected to be in [0..7]
 -}
unsafeFromRankAndFile :: Integral i => i -> i -> Coord
unsafeFromRankAndFile
  (fromIntegral -> rInd)
  (fromIntegral -> fInd) =
    Coord $ shiftL rInd 3 .|. fInd

fromRankAndFile :: Integral i => i -> i -> Maybe Coord
fromRankAndFile r f =
  unsafeFromRankAndFile r f
    <$ guard (r >= 0 && r < 8 && f >= 0 && f < 8)

_gen :: IO ()
_gen = do
  let coords = do
        rank <- ['1' .. '8']
        file <- ['a' .. 'h']
        pure [file, rank]
      comSepCoords = intercalate ", " coords
  putStrLn $ comSepCoords <> " :: Coord"
  putStrLn $ "[" <> comSepCoords <> "] = fmap Coord [0..63]"

{-
  The section below are generated by `_gen`.
 -}
a1, b1, c1, d1, e1, f1, g1, h1, a2, b2, c2, d2, e2, f2, g2, h2, a3, b3, c3, d3, e3, f3, g3, h3, a4, b4, c4, d4, e4, f4, g4, h4, a5, b5, c5, d5, e5, f5, g5, h5, a6, b6, c6, d6, e6, f6, g6, h6, a7, b7, c7, d7, e7, f7, g7, h7, a8, b8, c8, d8, e8, f8, g8, h8 :: Coord
[a1, b1, c1, d1, e1, f1, g1, h1, a2, b2, c2, d2, e2, f2, g2, h2, a3, b3, c3, d3, e3, f3, g3, h3, a4, b4, c4, d4, e4, f4, g4, h4, a5, b5, c5, d5, e5, f5, g5, h5, a6, b6, c6, d6, e6, f6, g6, h6, a7, b7, c7, d7, e7, f7, g7, h7, a8, b8, c8, d8, e8, f8, g8, h8] = fmap Coord [0 .. 63]
